// <auto-generated />
using System;
using DeveloperChallenge.Infra.Repositories.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DeveloperChallenge.Infra.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20201129233729_UpdateForeignKey")]
    partial class UpdateForeignKey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeveloperChallenge.Domain.Enities.OfxFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BankId")
                        .HasColumnName("BANK_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CREATED_AT_DT")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("FileCreation")
                        .HasColumnName("FILE_CREATION_DT")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IntervalEnd")
                        .HasColumnName("INTERVAL_END_DT")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("IntervalStart")
                        .HasColumnName("INTERVAL_START_DT")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Language")
                        .HasColumnName("LANGUAGE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrNuId")
                        .HasColumnName("TR_NU_ID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OFX_FILE");
                });

            modelBuilder.Entity("DeveloperChallenge.Domain.Enities.OfxTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CREATED_AT_DT")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DuplicationOfTransactionId")
                        .HasColumnName("DUP_OF_TRANSACTION_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("EntryType")
                        .HasColumnName("ENTRY_TYPE")
                        .HasColumnType("INT");

                    b.Property<Guid>("OfxFileId")
                        .HasColumnName("OFX_FILE_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnName("TRANSACTION_DT")
                        .HasColumnType("DATETIME");

                    b.Property<decimal?>("Value")
                        .HasColumnName("VALUE")
                        .HasColumnType("NUMERIC(20,2)");

                    b.HasKey("Id");

                    b.HasIndex("OfxFileId");

                    b.ToTable("OFX_TRANSACTION");
                });

            modelBuilder.Entity("DeveloperChallenge.Domain.Enities.OfxTransaction", b =>
                {
                    b.HasOne("DeveloperChallenge.Domain.Enities.OfxFile", null)
                        .WithMany("Transactions")
                        .HasForeignKey("OfxFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
